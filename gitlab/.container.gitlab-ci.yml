stages:
  - prepare
  - release (single arch)
  - release (multi arch)
  - post

extract dockerfiles:
  stage: prepare
  needs:
  - pipeline: $PARENT_PIPELINE_ID
    job: util_get_package_spec
  image: node:lts
  variables:
    GIT_STRATEGY: empty
  script:
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - mkdir "packages"
    - |
      while read PACKAGE_SPEC; do
        PACKAGE_NAME="$(echo -n "${PACKAGE_SPEC}" | cut -d "/" -f2 | cut -d "@" -f1)"
        PACKAGE_BUNDLE="$(npm pack --silent "${PACKAGE_SPEC}")"

        if $(tar -tf "$PACKAGE_BUNDLE" "package/Dockerfile" >/dev/null 2>&1); then
          mkdir -p "packages/${PACKAGE_NAME}"

          echo -n "${PACKAGE_SPEC}" > "packages/${PACKAGE_NAME}/spec.txt"

          tar --strip-components=1 -xf "${PACKAGE_BUNDLE}" "package/Dockerfile"
          mv "Dockerfile" "packages/${PACKAGE_NAME}/"

        fi

        rm "${PACKAGE_BUNDLE}"
      done < "packages.txt"
  artifacts:
    paths:
      - packages/**/*

make images:
  stage: release (single arch)
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: empty
  parallel:
    matrix:
      - ARCH: amd64
        TAG: x86_64
      # - ARCH: arm64
      #   TAG: arm64
  tags:
    - $TAG
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      variables:
        VERSION_TAG: "latest"
    - if: $CI_COMMIT_TAG
      variables:
        VERSION_TAG: "pre-${CI_COMMIT_TAG_MESSAGE}"
  script:
    - echo "$NPM_INSTALL_ADDITIONAL_CONFIG" > "/kaniko/.npmrc"
    - |
      for PACKAGE in packages/*; do
        PACKAGE_NAME="$(basename "${PACKAGE}")"
        PACKAGE_SPEC="$(cat "${PACKAGE}/spec.txt")"

        /kaniko/executor \
          --build-arg "PACKAGE_SPEC=${PACKAGE_SPEC}" \
          --cleanup \
          --context "${CI_PROJECT_DIR}" \
          --destination "${CI_REGISTRY_IMAGE}/${PACKAGE_NAME}:${CI_COMMIT_TAG}-${ARCH}" \
          --destination "${CI_REGISTRY_IMAGE}/${PACKAGE_NAME}:${VERSION_TAG}-${ARCH}" \
          --dockerfile "${PACKAGE}/Dockerfile"
      done

make multi-arch images:
  stage: release (multi arch)
  image:
    name: mplatform/manifest-tool:alpine
    entrypoint: ["/bin/sh"]
  variables:
    GIT_STRATEGY: empty
    PLATFORMS: "linux/amd64"
    # PLATFORMS: "linux/amd64,linux/arm64"
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      variables:
        VERSION_TAG: "latest"
    - if: $CI_COMMIT_TAG
      variables:
        VERSION_TAG: "pre-${CI_COMMIT_TAG_MESSAGE}"
  script:
    - |
      for PACKAGE in packages/*; do
        PACKAGE_NAME="$(basename "${PACKAGE}")"
        TARGET="${CI_REGISTRY_IMAGE}/${PACKAGE_NAME}:${CI_COMMIT_TAG}"

        manifest-tool \
          --username "${CI_REGISTRY_USER}" \
          --password "${CI_REGISTRY_PASSWORD}" \
          push from-args \
          --platforms "${PLATFORMS}" \
          --template "${TARGET}-ARCH" \
          --tags "${VERSION_TAG}" \
          --target "${TARGET}"

        echo "${TARGET}" >> "containers.txt"
      done
  artifacts:
    paths:
      - containers.txt

post prerelease containers published:
  stage: post
  image: node:lts
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: never
    - if: $CI_COMMIT_TAG
      when: on_success
  script:
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - npm ci --audit=false --fund=false
    - npm exec boilerplate-ci-post-prerelease-containers-published
