image: node:latest

cache:
  key:
    files:
      - package-lock.json
  paths:
    - .npm/
    - dist/
    - node_modules/

stages:
  - prepare
  - check
  - transform
  - release

npm install:
  stage: prepare
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  script:
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - npm ci --audit=false --fund=false

check_commit:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - make -s check_commit

check_package_json:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - make -s check_package_json

check_lint:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.{js,ts}"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "**/*.{js,ts}"
  script:
    - make -s check_lint

check_config:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.js"
        - "**/tsconfig*.json"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "**/*.js"
        - "**/tsconfig*.json"
  script:
    - make -s check_config

check_typescript:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "src/**/*.{js,ts}"
        - "packages/*/src/**/*.{js,ts}"
        - "**/tsconfig*.json"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "src/**/*.{js,ts}"
        - "packages/*/src/**/*.{js,ts}"
        - "**/tsconfig*.json"
  script:
    - make -s check_typescript

check_test:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "src/**/*.{js,ts}"
        - "packages/*/src/**/*.{js,ts}"
        - "**/tsconfig*.json"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "src/**/*.{js,ts}"
        - "packages/*/src/**/*.{js,ts}"
        - "**/tsconfig*.json"
  script:
    - make -s check_test

transform_prod:
  stage: transform
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - make -s transform_prod

tag:prerelease:
  stage: release
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  allow_failure: true
  script:
    - git config user.email "${CI_BOT_EMAIL}"
    - git config user.name "${CI_BOT_NAME}"
    - git remote add gitlab_origin "${CI_BOT_ORIGIN}"
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - npm version prerelease --audit=false --fund=false --preid "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
    - git push gitlab_origin --tags

tag:patch:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  allow_failure: true
  script:
    - git config user.email "${CI_BOT_EMAIL}"
    - git config user.name "${CI_BOT_NAME}"
    - git remote add gitlab_origin "${CI_BOT_ORIGIN}"
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - npm version patch --audit=false --fund=false
    - git push gitlab_origin "HEAD:${CI_COMMIT_REF_NAME}" --push-option=ci.skip
    - git push gitlab_origin --tags

tag:minor:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  allow_failure: true
  script:
    - git config user.email "${CI_BOT_EMAIL}"
    - git config user.name "${CI_BOT_NAME}"
    - git remote add gitlab_origin "${CI_BOT_ORIGIN}"
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - npm version minor --audit=false --fund=false
    - git push gitlab_origin "HEAD:${CI_COMMIT_REF_NAME}" --push-option=ci.skip
    - git push gitlab_origin --tags

tag:major:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  allow_failure: true
  script:
    - git config user.email "${CI_BOT_EMAIL}"
    - git config user.name "${CI_BOT_NAME}"
    - git remote add gitlab_origin "${CI_BOT_ORIGIN}"
    - for NPM_CONFIG in $NPM_INSTALL_ADDITIONAL_CONFIG; do npm config set "${NPM_CONFIG}"; done
    - npm version major --audit=false --fund=false
    - git push gitlab_origin "HEAD:${CI_COMMIT_REF_NAME}" --push-option=ci.skip
    - git push gitlab_origin --tags

publish:gitlab:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm config set "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}"
    - npm config set "@${CI_PROJECT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
    - npm publish

publish:npm:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: on_success
    - if: $CI_COMMIT_TAG
      when: manual
  script:
    - npm config set "//registry.npmjs.org/:_authToken=${BOILERPLATE_PUBLISH_NPM_TOKEN}"
    - npm pkg set "repository.url=${BOILERPLATE_PUBLISH_NPM_GIT_URL}"
    - npm publish --access public
