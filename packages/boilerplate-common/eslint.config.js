import stylisticTs from '@stylistic/eslint-plugin';
import typescriptPlugin from '@typescript-eslint/eslint-plugin';
// @ts-ignore
import typescriptParser from '@typescript-eslint/parser';
// // @ts-ignore
// import importPlugin from 'eslint-plugin-import';
import prettierPlugin from 'eslint-plugin-prettier';
// @ts-ignore
import simpleImportSortPlugin from 'eslint-plugin-simple-import-sort';
// @ts-ignore
import pluginUnicorn from 'eslint-plugin-unicorn';

const unicornRecommendedRules =
  /** @type {import('eslint').Linter.RulesRecord} */ (
    pluginUnicorn.configs.recommended.rules
  ); // assert correct type, as "eslint-plugin-unicorn" has no type definitions

/** @type {import('eslint').Linter.RulesRecord} */
export const rules = {
  ...unicornRecommendedRules,
  '@stylistic/ts/no-extra-semi': 'error',
  '@typescript-eslint/adjacent-overload-signatures': 'error',
  '@typescript-eslint/ban-ts-comment': 'error',
  '@typescript-eslint/explicit-module-boundary-types': [
    'error',
    {
      allowArgumentsExplicitlyTypedAsAny: true,
    },
  ],
  '@typescript-eslint/member-ordering': [
    'error',
    {
      default: {
        memberTypes: [
          'signature',
          'private-static-field',
          'protected-static-field',
          'public-static-field',
          'static-field',
          'private-static-method',
          'protected-static-method',
          'public-static-method',
          'static-method',
          'private-decorated-field',
          'private-instance-field',
          'private-field',
          'protected-abstract-field',
          'protected-decorated-field',
          'protected-instance-field',
          'protected-field',
          'public-abstract-field',
          'public-decorated-field',
          'public-instance-field',
          'public-field',
          'abstract-field',
          'decorated-field',
          'instance-field',
          'field',
          'private-constructor',
          'protected-constructor',
          'public-constructor',
          'constructor',
          'private-decorated-method',
          'private-instance-method',
          'private-method',
          'protected-abstract-method',
          'protected-decorated-method',
          'protected-instance-method',
          'protected-method',
          'public-abstract-method',
          'public-decorated-method',
          'public-instance-method',
          'public-method',
          'abstract-method',
          'decorated-method',
          'instance-method',
          'method',
        ],
        order: 'alphabetically',
      },
    },
  ],
  '@typescript-eslint/naming-convention': [
    'error',
    {
      format: ['camelCase'],
      selector: 'default',
      trailingUnderscore: 'allow',
    },
    {
      format: ['camelCase', 'PascalCase'],
      selector: 'function',
      trailingUnderscore: 'allow',
    },
    {
      format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
      leadingUnderscore: 'allow',
      selector: 'variable',
      trailingUnderscore: 'allow',
    },
    {
      format: null,
      modifiers: ['destructured'],
      selector: 'variable',
      trailingUnderscore: 'allow',
    },
    {
      format: ['camelCase'],
      leadingUnderscore: 'allow',
      selector: 'parameter',
      trailingUnderscore: 'allow',
    },
    {
      format: ['camelCase'],
      leadingUnderscore: 'allow',
      selector: 'memberLike',
      trailingUnderscore: 'allow',
    },
    {
      format: ['camelCase'],
      leadingUnderscore: 'require',
      modifiers: ['private'],
      selector: 'memberLike',
      trailingUnderscore: 'allow',
    },
    {
      format: ['UPPER_CASE'],
      selector: 'enumMember',
      trailingUnderscore: 'allow',
    },
    {
      format: ['PascalCase'],
      selector: 'typeLike',
      trailingUnderscore: 'allow',
    },
  ],
  '@typescript-eslint/no-array-constructor': 'error',
  '@typescript-eslint/no-empty-function': 'error',
  '@typescript-eslint/no-empty-interface': 'error',
  '@typescript-eslint/no-empty-object-type': 'error',
  '@typescript-eslint/no-explicit-any': 'warn',
  '@typescript-eslint/no-extra-non-null-assertion': 'error',
  '@typescript-eslint/no-inferrable-types': 'error',
  '@typescript-eslint/no-misused-new': 'error',
  '@typescript-eslint/no-namespace': 'error',
  '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
  '@typescript-eslint/no-non-null-assertion': 'warn',
  '@typescript-eslint/no-shadow': 'error',
  '@typescript-eslint/no-this-alias': 'error',
  '@typescript-eslint/no-unsafe-function-type': 'error',
  '@typescript-eslint/no-unused-vars': [
    'warn',
    {
      varsIgnorePattern: '(?:^_.*|^h|^fragment$|^T)',
    },
  ],
  '@typescript-eslint/no-use-before-define': 'error',
  '@typescript-eslint/no-useless-constructor': 'warn',
  '@typescript-eslint/no-var-requires': 'error',
  '@typescript-eslint/no-wrapper-object-types': 'error',
  '@typescript-eslint/parameter-properties': [
    'warn',
    {
      prefer: 'parameter-property',
    },
  ],
  '@typescript-eslint/prefer-as-const': 'error',
  '@typescript-eslint/prefer-for-of': 'error',
  '@typescript-eslint/prefer-namespace-keyword': 'error',
  '@typescript-eslint/triple-slash-reference': 'error',
  'accessor-pairs': 'error',
  'array-bracket-spacing': ['error', 'never'],
  'array-callback-return': 'error',
  'arrow-body-style': 'warn',
  'arrow-parens': ['error', 'always'],
  'arrow-spacing': [
    'error',
    {
      after: true,
      before: true,
    },
  ],
  'block-scoped-var': 'error',
  'block-spacing': ['error', 'always'],
  'brace-style': [
    'error',
    '1tbs',
    {
      allowSingleLine: true,
    },
  ],
  'callback-return': 'error',
  'comma-style': ['error', 'last'],
  complexity: 'error',
  'computed-property-spacing': ['error', 'never'],
  'consistent-return': [
    'error',
    {
      treatUndefinedAsUnspecified: false,
    },
  ],
  'default-case': 'error',
  'dot-location': ['error', 'property'],
  'dot-notation': [
    'error',
    {
      allowKeywords: true,
    },
  ],
  'eol-last': 'error',
  eqeqeq: 'error',
  'for-direction': 'error',
  'func-call-spacing': 'error',
  'func-name-matching': 'error',
  'func-names': 'error',
  'func-style': [
    'error',
    'declaration',
    {
      allowArrowFunctions: true,
    },
  ],
  'generator-star-spacing': 'error',
  'global-require': 'error',
  'guard-for-in': 'error',
  'handle-callback-err': 'error',
  'id-blacklist': 'error',
  'id-match': 'error',
  // 'import/extensions': [
  //   'error',
  //   'ignorePackages',
  //   {
  //     cjs: 'never',
  //     js: 'always',
  //     jsx: 'never',
  //     mjs: 'never',
  //     ts: 'never',
  //     tsx: 'never',
  //   },
  // ],
  // 'import/no-commonjs': 'error',
  // 'import/no-duplicates': 'error',
  // 'import/no-named-as-default': 'warn',
  // 'import/no-named-as-default-member': 'warn',
  'jsx-quotes': 'error',
  'key-spacing': 'error',
  'keyword-spacing': [
    'error',
    {
      after: true,
      before: true,
    },
  ],
  'linebreak-style': ['error', 'unix'],
  'lines-around-directive': 'error',
  'lines-between-class-members': [
    'error',
    'always',
    {
      exceptAfterSingleLine: true,
    },
  ],
  'max-depth': 'error',
  'max-nested-callbacks': 'error',
  'multiline-comment-style': ['error', 'separate-lines'],
  'new-cap': 'error',
  'new-parens': 'error',
  'no-alert': 'error',
  'no-async-promise-executor': 'error',
  'no-await-in-loop': 'error',
  'no-bitwise': 'error',
  'no-buffer-constructor': 'error',
  'no-caller': 'error',
  'no-case-declarations': 'error',
  'no-catch-shadow': 'error',
  'no-class-assign': 'error',
  'no-compare-neg-zero': 'error',
  'no-cond-assign': 'error',
  'no-console': 'error',
  'no-constant-condition': 'error',
  'no-control-regex': 'error',
  'no-debugger': 'error',
  'no-delete-var': 'error',
  'no-div-regex': 'error',
  'no-duplicate-case': 'error',
  'no-duplicate-imports': 'error',
  'no-else-return': 'error',
  'no-empty': 'error',
  'no-empty-character-class': 'error',
  'no-empty-pattern': 'error',
  'no-eq-null': 'error',
  'no-eval': 'error',
  'no-ex-assign': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'error',
  'no-extra-boolean-cast': 'error',
  'no-extra-label': 'error',
  'no-fallthrough': 'error',
  'no-floating-decimal': 'error',
  'no-global-assign': 'error',
  'no-implicit-coercion': 'error',
  'no-implicit-globals': 'error',
  'no-implied-eval': 'error',
  'no-inner-declarations': 'error',
  'no-invalid-regexp': 'error',
  'no-invalid-this': 'error',
  'no-irregular-whitespace': 'error',
  'no-iterator': 'error',
  'no-label-var': 'error',
  'no-labels': 'error',
  'no-lone-blocks': 'error',
  'no-lonely-if': 'error',
  'no-loop-func': 'error',
  'no-misleading-character-class': 'error',
  'no-mixed-requires': 'error',
  'no-mixed-spaces-and-tabs': 'error',
  'no-multi-assign': 'error',
  'no-multi-spaces': 'error',
  'no-multi-str': 'error',
  'no-multiple-empty-lines': 'error',
  'no-native-reassign': 'error',
  'no-negated-condition': 'error',
  'no-negated-in-lhs': 'error',
  'no-nested-ternary': 'error',
  'no-new': 'error',
  'no-new-func': 'error',
  'no-new-object': 'error',
  'no-new-require': 'error',
  'no-new-wrappers': 'error',
  'no-octal': 'error',
  'no-octal-escape': 'error',
  'no-param-reassign': 'error',
  'no-path-concat': 'error',
  'no-plusplus': 'error',
  'no-proto': 'error',
  'no-prototype-builtins': 'error',
  'no-regex-spaces': 'error',
  'no-restricted-globals': 'error',
  'no-restricted-imports': 'error',
  'no-restricted-modules': 'error',
  'no-restricted-properties': 'error',
  'no-restricted-syntax': 'error',
  'no-return-assign': 'error',
  'no-return-await': 'error',
  'no-script-url': 'error',
  'no-self-assign': 'error',
  'no-self-compare': 'error',
  'no-sequences': 'error',
  'no-shadow-restricted-names': 'error',
  'no-spaced-func': 'error',
  'no-sparse-arrays': 'error',
  'no-sync': 'error',
  'no-tabs': 'error',
  'no-template-curly-in-string': 'error',
  'no-throw-literal': 'error',
  'no-trailing-spaces': 'error',
  'no-undef-init': 'error',
  'no-unexpected-multiline': 'error',
  'no-unmodified-loop-condition': 'error',
  'no-unneeded-ternary': 'error',
  'no-unsafe-finally': 'error',
  'no-unused-expressions': 'error',
  'no-unused-labels': 'error',
  'no-useless-call': 'error',
  'no-useless-catch': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-concat': 'error',
  'no-useless-escape': 'error',
  'no-useless-rename': 'error',
  'no-useless-return': 'error',
  'no-var': 'error',
  'no-void': 'error',
  'no-warning-comments': 'error',
  'no-whitespace-before-property': 'error',
  'no-with': 'error',
  'nonblock-statement-body-position': 'error',
  'object-curly-newline': 'error',
  'object-curly-spacing': ['error', 'always'],
  'object-shorthand': 'error',
  'one-var-declaration-per-line': 'error',
  'operator-assignment': ['error', 'always'],
  'padding-line-between-statements': 'error',
  'prefer-arrow-callback': 'error',
  'prefer-named-capture-group': 'error',
  'prefer-numeric-literals': 'error',
  'prefer-promise-reject-errors': [
    'error',
    {
      allowEmptyReject: true,
    },
  ],
  'prefer-rest-params': 'error',
  'prefer-spread': 'error',
  'prefer-template': 'error',
  'prettier/prettier': [
    'error',
    {
      singleQuote: true,
    },
    {
      usePrettierrc: false,
    },
  ],
  'quote-props': ['error', 'as-needed'],
  quotes: ['error', 'single'],
  radix: ['error', 'always'],
  'require-atomic-updates': 'error',
  'require-yield': 'error',
  'rest-spread-spacing': ['error', 'never'],
  semi: 'error',
  'semi-spacing': [
    'error',
    {
      after: true,
      before: false,
    },
  ],
  'semi-style': ['error', 'last'],
  'simple-import-sort/imports': 'error',
  'sort-keys': 'error',
  'sort-vars': 'error',
  'space-before-blocks': 'error',
  'space-in-parens': ['error', 'never'],
  'space-infix-ops': 'error',
  'space-unary-ops': [
    'error',
    {
      nonwords: false,
      words: true,
    },
  ],
  'spaced-comment': ['error', 'always'],
  strict: ['error', 'never'],
  'switch-colon-spacing': 'error',
  'symbol-description': 'error',
  'template-curly-spacing': ['error', 'never'],
  'template-tag-spacing': 'error',
  'unicode-bom': ['error', 'never'],
  'unicorn/no-null': 'off',
  'unicorn/no-useless-undefined': 'off',
  'unicorn/number-literal-case': 'off',
  'unicorn/prefer-native-coercion-functions': 'off',
  'unicorn/prefer-regexp-test': 'off',
  'unicorn/prefer-set-has': 'off',
  'unicorn/prefer-spread': 'off',
  'unicorn/prefer-top-level-await': 'off',
  'unicorn/prevent-abbreviations': 'off',
  'use-isnan': 'error',
  'vars-on-top': 'error',
  'wrap-regex': 'error',
  'yield-star-spacing': 'error',
  yoda: ['error', 'never'],
};

/** @type {Record<string, import('eslint').ESLint.Plugin>} */
export const plugins = {
  '@stylistic/ts': stylisticTs,
  // @ts-ignore
  '@typescript-eslint': typescriptPlugin,
  // import: importPlugin,
  prettier: prettierPlugin,
  'simple-import-sort': simpleImportSortPlugin,
  unicorn: { rules: pluginUnicorn.rules },
};

/** @type {import('eslint').Linter.Config} */
export const configMeta = {
  files: ['**/*.{js,mjs}'],
  ignores: ['dist/**/*', 'node_modules/**/*', 'src/**/*', 'packages/**/*'],
  languageOptions: {
    parser: typescriptParser,
    parserOptions: {
      ecmaFeatures: { modules: true },
      ecmaVersion: 'latest',
      project: 'tsconfig.meta.json',
    },
  },
  plugins,
  rules: {
    ...rules,
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/naming-convention': 'off',
    // 'import/no-named-as-default': 'off',
    // 'import/no-named-as-default-member': 'off',
    'unicorn/prefer-export-from': 'off',
  },
  settings: {
    'import/resolver': {
      typescript: {
        enforceExtension: true,
        project: 'tsconfig.meta.json',
      },
    },
  },
};

/** @type {import('eslint').Linter.Config} */
export const config = {
  files: ['src/**/*.{js,ts}'],
  languageOptions: {
    globals: {
      Atomics: true,
      SharedArrayBuffer: true,
    },
    parser: typescriptParser,
    parserOptions: {
      ecmaFeatures: { modules: true },
      ecmaVersion: 'latest',
      project: 'tsconfig.json',
    },
  },
  plugins,
  rules,
  settings: {
    'import/resolver': {
      typescript: {
        enforceExtension: true,
        extensionAlias: {
          '.js': ['.js', '.ts'],
        },
        project: 'tsconfig.json',
      },
    },
  },
};

/** @type {import('eslint').Linter.Config[]} */
export default [configMeta, config];
